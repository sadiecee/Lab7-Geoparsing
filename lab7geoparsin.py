# -*- coding: utf-8 -*-
"""lab7geoparsin.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_FwivwgBbQUc7nl-ZimHSXByDfGGJ3vD
"""

'''
Name: Sadie Murray
Python: Python version 3
Summary: For this code, I am using a shapefile of the United States as well as a text document in order to create a map showing which places 
are mentioned in the document most often. For this code, I am using an essay I wrote for a geography class about the city of San Francisco. 
Because it was a paper written about the geography of San Francisco, including historic changes to skyline of the city, I thought it would 
be an interesting document to map. This map takes my SF paper (located in a GitHub file) and a country shapefile as an input. It produces
two maps as an output, one with Python and one using the Folium library, and a graph of the city frequency that was mentioned. 
'''

# Install packages as needed
!pip install geopandas
!pip install geotext
!pip install numpy geotext
!pip install matplotlib
!pip install urllib #error
!pip install geopy
!pip install shapely
!pip install descartes
!pip install nltk

# Importing all the libraries we'll use
import geopandas as gpd
import pandas as pd
import nltk
import numpy as np
import matplotlib.pyplot as plt
import urllib.request#new
import descartes

from urllib import request
from geotext import GeoText
from geopy.geocoders import Nominatim
from geopy.exc import GeocoderTimedOut
from shapely.geometry import Point, Polygon

url = 'https://github.com/sadiecee/Lab7-Geoparsing/blob/main/Data/textfile.txt' #my essay on SF historical geography
response = request.urlopen(url)
raw = response.read().decode('utf8')
print(f'{type(raw)}, \n{len(raw)}, \n{raw[:501]}')

#this is a test that will generate a list of the cities found in my document
places = GeoText(raw)
cities = list(places.cities)
cities #Calling this shows my list of cities. You could also use print(cities)

#this will geolocated the cities found in the previous code block
geolocator = Nominatim(user_agent='thehardshelledturtled@gmail.com', timeout=2) # requires your e-mail address to track usage. Timeout set for 2 seconds.

lat_lon = []
for city in cities:
  try:
    location = geolocator.geocode(city)
    if location:
      # If you want to see only lat/lon as they process you can include the following code here but I found it added a lot of time to the operation: print(location.latitude, location.longitude)
      lat_lon.append(location)
  except GeocoderTimedOut as e:
    print("Error: geocode failed on input %s with message %s">
          (city, e))
lat_lon

#this will place the cities and their coordinates in a data frame that can be plotted 
df = pd.DataFrame(lat_lon, columns=['City Name', 'Coordinates'])
df.head(7)

#this will convert my data to points 
geometry = [Point(x[1], x[0]) for x in df['Coordinates']]
geometry[:7]

# coordinate system we're using
crs = {'init': 'epsg:4326'}

# convert df to geo df
geo_df = gpd.GeoDataFrame(df, crs=crs, geometry=geometry)
geo_df.head()

# Upload local script to Colab - running this creates a "choose file" button to upload local files.
# .shp file downloaded from https://hub.arcgis.com/datasets/a21fdb46d23e4ef896f31475217cbb08_1
from google.colab import files
uploaded = files.upload()

# world map .shp file we down/uploaded
countries_map = gpd.read_file('Countries_WGS84.shp')

#this will set up the first map
f, ax = plt.subplots(figsize=(16, 16))
countries_map.plot(ax=ax, alpha=0.4, color='grey')
geo_df['geometry'].plot(ax=ax, markersize = 30, color = 'r', marker = '^', alpha=.4)

# Commented out IPython magic to ensure Python compatibility.
#Import datavis libraries
import matplotlib.pyplot as plt
import seaborn as sns # used to set the style of the figures

# Figures inline and set visualization style
# %matplotlib inline
sns.set()

# Create freq dist and plot
freqdist1 = nltk.FreqDist(cities)
freqdist1.plot() #I'm running this without an argument because I don't have very many words

#import required libraries, packages, etc.
import folium
from folium import plugins
import json

# Converting geopandas dataframe to geojson so it can be plotted on a web map with folium.
geo_df['geometry'].to_file("TwainCities.geojson", driver='GeoJSON')

# initialize the map at a global scale with a point midaway between U.S. and Europe as the center.
SFMap = folium.Map(location=[32.826919, -41.225228], tiles='Stamen Terrain', zoom_start=2)

folium.GeoJson("TwainCities.geojson").add_to(SFMap)

# Display your map   
SFMap